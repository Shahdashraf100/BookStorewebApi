// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using projecttyexammmmm;

#nullable disable

namespace projecttyexammmmm.Migrations
{
    [DbContext(typeof(dbcontext))]
    partial class dbcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("authorsAuthorId")
                        .HasColumnType("int");

                    b.Property<int>("booksBookId")
                        .HasColumnType("int");

                    b.HasKey("authorsAuthorId", "booksBookId");

                    b.HasIndex("booksBookId");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookGener", b =>
                {
                    b.Property<int>("booksBookId")
                        .HasColumnType("int");

                    b.Property<int>("genersGenerId")
                        .HasColumnType("int");

                    b.HasKey("booksBookId", "genersGenerId");

                    b.HasIndex("genersGenerId");

                    b.ToTable("BookGener");
                });

            modelBuilder.Entity("projecttyexammmmm.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Authorphone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentitycartId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("projecttyexammmmm.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<DateTime>("BookPublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("projecttyexammmmm.Models.Creadetcart", b =>
                {
                    b.Property<int>("CreadcartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreadcartId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("CreadcartName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CreadcartId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Creadcarts");
                });

            modelBuilder.Entity("projecttyexammmmm.Models.Gener", b =>
                {
                    b.Property<int>("GenerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenerId"));

                    b.Property<string>("GenerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenerId");

                    b.ToTable("Geners");
                });

            modelBuilder.Entity("projecttyexammmmm.Models.Idenitycart", b =>
                {
                    b.Property<int>("IdentitycartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentitycartId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IdentitycartExpireDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdentitycartId");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.ToTable("Identitycarts");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("projecttyexammmmm.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("authorsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projecttyexammmmm.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGener", b =>
                {
                    b.HasOne("projecttyexammmmm.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("booksBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("projecttyexammmmm.Models.Gener", null)
                        .WithMany()
                        .HasForeignKey("genersGenerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("projecttyexammmmm.Models.Creadetcart", b =>
                {
                    b.HasOne("projecttyexammmmm.Models.Author", "author")
                        .WithMany("creadcarts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");
                });

            modelBuilder.Entity("projecttyexammmmm.Models.Idenitycart", b =>
                {
                    b.HasOne("projecttyexammmmm.Models.Author", "author")
                        .WithOne("identicart")
                        .HasForeignKey("projecttyexammmmm.Models.Idenitycart", "AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");
                });

            modelBuilder.Entity("projecttyexammmmm.Models.Author", b =>
                {
                    b.Navigation("creadcarts");

                    b.Navigation("identicart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
